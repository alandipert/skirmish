(page "index.html"
  (:require
   [cljsjs.codemirror]
   [cljs.tools.reader :refer [read-string]]
   [cljs.js :as cljs]
   [skirmish.rpc :as rpc]
   [castra.core :refer [mkremote]]))

(defc compiled-hoplon nil)
(defc error nil)
(defc loading [])

(def compile-hoplon
  (mkremote 'skirmish.api/get-state compiled-hoplon error loading))

(defn doit [expr]
  (rpc/get-state)
  )

(defc code-str nil)

(defc= maybe-expr
  (try (read-string (str "(" code-str ")"))
       (catch js/Error e e)))

(defc= read-error
  (when (instance? js/Error maybe-expr) maybe-expr))

(defc= expr
  (when-not read-error maybe-expr))

(html
  (body
    (div
      (div
        :id "input"
        (textarea :value code-str :keyup #(reset! code-str @%))
        (button
          :type "submit"
          :click #(when @expr (compile-hoplon @expr))
          "pres")
        )
      (div :id "output"
           (div :css {:border "1px solid green"}
                (code :text (cell= (pr-str expr))))
           (div :css {:border "1px solid red"}
                (code :text compiled-hoplon))
           )
      (div :id "error"
           :css {:color "orange"}
           (pre :text (cell= (when read-error (.-message read-error))))))))
